name: Update Discussion based on readme

on:
  push:
    branches:
      - main

jobs:
  update-discussion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Modify readme content and update discussion
        id: readme-content
        shell: bash
        run: |
          #!/bin/bash
          
          readme_content=$(cat README_test.md)
          echo "readme_content: $readme_content"
          
          echo "github.repository_owner: ${{ github.repository_owner }}"
          echo "github.repository: ${{ github.repository }}"
          modified_content=${readme_content//"![](./"/"![](https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ github.repository }}/main/"}
          echo "modified_content: $modified_content"

          # discussion_id=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/discussions" | jq -r '.[0].id')
          # curl -X PATCH \
          #   -H "Authorization: Bearer $GITHUB_TOKEN" \
          #   -d '{"body": "'"${{ steps.readme-content.outputs.content }}"'"}' \
          #   "https://api.github.com/graphql"

          echo "::set-output name=content::${modified_content}"

      - name: Find pinned discussion Global ID
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query FindDiscussionIds($repositoryOwner: String!, $repositoryName: String!) {
              repository(owner:$repositoryOwner, name:$repositoryName) {
                pinnedDiscussions(first:1) {
                  nodes {
                    id
                  }
                }
              }
            }
          variables: |
            {
              "repositoryOwner": "${{ github.repository_owner }}",
              "repositoryName": "${{ github.event.repository.name }}"
            }
        id: find-discussion

      - name: Display Discussion Global ID
        run: |
          echo "Discussion Global ID: ${{ steps.find-discussion.outputs.data.repository.discussions.nodes[0].id }}"

      # - name: Create a discussion
      #   id: create_discussion
      #   uses: octokit/graphql-action@v2.x
      #   with:
      #     title: "Sample Discussion!!!"
      #     body: "somebody variable"
      #     query: |
      #       mutation($title:String!, $body:String!) {
      #         updateDiscussion(input: {discussionId: "59", title: $title, body: $body}) {
      #           discussion {
      #             id
      #           }
      #         }
      #       }
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
